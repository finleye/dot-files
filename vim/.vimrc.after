"turn on syntax highlighting
set nocursorcolumn
set nocursorline
set hlsearch
set ignorecase
set nu
syntax on
syntax sync minlines=256
set background=dark
let g:solarized_termcolors=16
set t_Co=16
colorscheme solarized

if !has("gui_running")
   let g:gruvbox_italic=0
endif

" clear match buffer
nmap <silent> // :nohlsearch<CR>


" using system keyboard
vmap <C-c> y:call system("pbcopy", getreg("\""))<CR>
nmap <C-v> :call setreg("\"",system("pbpaste"))<CR>p

" Set up softtabs
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Window/Tab/Split Manipulation
"   Move between split windows by using the four directions H, L, I, N
"   (note that  I use I and N instead of J and K because  J already does
"   line joins and K is mapped to GitGrep the current word
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-l> <C-w>l
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-j> <C-w>j

"pick
let g:pick_executable = "pick"
nnoremap <silent> <C-t> :call PickFile()<CR>
nnoremap <silent> <C-g> :call PickFileTab()<CR>
nnoremap <silent> <C-b> :call PickBuffer()<CR>
nnoremap <leader>] :call PickTag()<CR>

" Create window splits easier. The default
" way is Ctrl-w,v and Ctrl-w,s. I remap
" this to vv and ss
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" Resize windows with arrow keys
nnoremap <C-Up> <C-w>+
nnoremap <C-Down> <C-w>-
nnoremap <C-Left> <C-w><
nnoremap <C-Right>  <C-w>>

" tSlime
let g:turbux_command_rspec = "bin/rspec"
let g:turbux_runner  = 'tslime'

" =================================================
" Awesome macro that promotes Rspec locals to 'lets'
" =================================================
function! PromoteToLet()
  :normal! dd
  ":exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

" ================ Switch between test and prod code ========================================
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<services\>') != -1 || match(current_file, '\<presenters\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1 || match(current_file, '\<workers\>') != -1 || match(current_file, '\<policies\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction
nnoremap <leader><Space> :call OpenTestAlternate()<cr>

" ================ White spaze Killahz========================================
" via: http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
command! StripTrailingWhitespaces call <SID>StripTrailingWhitespaces()
nmap ,w :StripTrailingWhitespaces<CR>


" disable syntastic by default
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <Leader>c :SyntasticCheck<CR>

" regenerate tags
nnoremap <Leader>R :!ctags -R<CR>

" 80,100 line marker
set colorcolumn=80,100

" rubocop
let g:vimrubocop_keymap = 0
let g:vimrubocop_config = '~/Documents/contently/.ruby-style.yml'
nmap <Leader>r :RuboCop<CR>

" SyntasticCheck
nmap <Leader>s :SyntasticCheck<CR>

"resource
nnoremap <leader>src :source ~/.vimrc.after<cr>


"silver searcher
let g:ackprg = 'ag --nogroup --nocolor --column'
nnoremap <silent> K :Ag <cword><CR>

"quickfix-reflector
let g:qf_modifiable = 1
let g:qf_join_changes = 1
let g:qf_write_changes = 1

" commandline things
nnoremap <Leader>G :Git<Space>
nnoremap <Leader>f :Ag<Space>
nnoremap <Leader>1 :!<Space>

" fugitive
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gl :Git l<CR>

" Make nerdtree look nice
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30
" Auto open nerd tree on startup
let g:nerdtree_tabs_open_on_gui_startup = 0
" Focus in the main content window
let g:nerdtree_tabs_focus_on_files = 1
" Using controlP open the file in the default nerdtree window at launch
let g:ctrlp_dont_split = 'NERD_tree_2'
" Toggle NERDTree
nmap <Leader>n :NERDTreeToggle<CR>
" Open the project tree and expose current file in the nerdtree with Ctrl-\
map <leader>m :NERDTreeFind<CR>
nnoremap <silent> <C-\> :NERDTreeFind<CR>:vertical res 30<CR>
